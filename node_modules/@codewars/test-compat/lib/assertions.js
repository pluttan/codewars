"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertNotApproxEquals = exports.assertApproxEquals = exports.expectNoError = exports.expectError = exports.assertNotSimilar = exports.assertSimilar = exports.assertNotDeepEquals = exports.assertDeepEquals = exports.assertNotContains = exports.assertContains = exports.assertNotEquals = exports.assertEquals = exports.expect = exports.fail = exports.pass = void 0;
const chai_1 = __importDefault(require("chai"));
const assert = chai_1.default.assert;
chai_1.default.config.truncateThreshold = 0;
exports.pass = () => { };
exports.fail = assert.fail;
exports.expect = assert;
exports.assertEquals = assert.strictEqual;
exports.assertNotEquals = assert.notStrictEqual;
exports.assertContains = assert.include;
exports.assertNotContains = assert.notInclude;
exports.assertDeepEquals = assert.deepEqual;
exports.assertNotDeepEquals = assert.notDeepEqual;
exports.assertSimilar = (actual, expected, msg) => {
    console.error(`assertSimilar is deprecated, use assert.deepEqual`);
    assert.deepEqual(actual, expected, msg);
};
exports.assertNotSimilar = (actual, expected, msg) => {
    console.error(`assertNotSimilar is deprecated, use assert.notDeepEqual`);
    assert.notDeepEqual(actual, expected, msg);
};
exports.expectError = (msg, fn) => {
    let message;
    let fun;
    if (typeof msg === "function") {
        fun = msg;
        message = "Expected an error to be thrown";
    }
    else {
        fun = fn;
        message = msg;
    }
    let passed = false;
    try {
        fun();
    }
    catch {
        passed = true;
    }
    assert(passed, message);
};
exports.expectNoError = (msg, fn) => {
    let message;
    let fun;
    if (typeof msg === "function") {
        fun = msg;
        message = "Unexpected error was thrown";
    }
    else {
        fun = fn;
        message = msg;
    }
    try {
        fun();
    }
    catch (ex) {
        assert.fail(appendToMessage(message, ex.message));
    }
};
exports.assertApproxEquals = (actual, expected, msg) => {
    if (Math.abs(expected) <= 1) {
        assert.closeTo(actual, expected, 1e-9);
    }
    else {
        msg = appendToMessage(msg, "Expected actual value " +
            actual +
            " to approximately equal expected value " +
            expected +
            " (accepted relative error: 1e-9)");
        assert(Math.abs((expected - actual) / expected) <= 1e-9, msg);
    }
};
exports.assertNotApproxEquals = (actual, unexpected, msg) => {
    msg = appendToMessage(msg, "Actual value " +
        actual +
        " should not approximately equal unexpected value " +
        unexpected +
        " (rejected relative error: 1e-9)");
    if (Math.abs(unexpected) <= 1) {
        assert(Math.abs(unexpected - actual) > 1e-9, msg);
    }
    else {
        assert(Math.abs((unexpected - actual) / unexpected) > 1e-9, msg);
    }
};
const appendToMessage = (msg, s) => msg ? msg + " - " + s : s;
//# sourceMappingURL=assertions.js.map